@using Microsoft.AspNet.Identity
@if (Request.IsAuthenticated)
{
    using (Html.BeginForm("LogOff", "Account", FormMethod.Post, new { id = "logoutForm", @class = "navbar-right" }))
    {
        @Html.AntiForgeryToken()

        <ul class="nav navbar-nav navbar-right">
            <li>
                @*Note the call to User.Identity.GetUserName() after ‘Hello’. This is a conservative approach as the MVC4 template has no way of knowing
                    in advance whether you’re planning to make you application claims-aware. User is an IPrincipal and Identity is an IIDentity
                    so it will work with pre-.NET4.5 claims auth identity types as well.
                    However, we know that we use claims, so let’s replace User.Identity.GetUserName() with:
                            System.Security.Claims.ClaimsPrincipal.Current.FindFirst(System.IdentityModel.Claims.ClaimTypes.GivenName).Value
                    This gives use the Given name instead of the UserName that is an email.  

                *@
                @Html.ActionLink("Hello " +@*User.Identity.GetUserName() is replaced by:*@                                                                                                     /**/
                    System.Security.Claims.ClaimsPrincipal.Current.FindFirst(System.IdentityModel.Claims.ClaimTypes.GivenName).Value + 
                    "!", "Index", "Manage", routeValues: null, htmlAttributes: new { title = "Manage" })
            </li>
            <li><a href="javascript:document.getElementById('logoutForm').submit()">Log off</a></li>
        </ul>
    }
}
else
{
    <ul class="nav navbar-nav navbar-right">
        <li>@Html.ActionLink("Register", "Register", "Account", routeValues: null, htmlAttributes: new { id = "registerLink" })</li>
        <li>@Html.ActionLink("Log in", "Login", "Account", routeValues: null, htmlAttributes: new { id = "loginLink" })</li>
    </ul>
}
